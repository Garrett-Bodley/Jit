#! /usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'pathname'
require 'pry'
require_relative '../lib/database/author'
require_relative '../lib/database/blob'
require_relative '../lib/database/commit'
require_relative '../lib/database/tree'
require_relative '../lib/database'
require_relative '../lib/entry'
require_relative '../lib/lockfile'
require_relative '../lib/refs'
require_relative '../lib/workspace'

command = ARGV.shift

case command
when 'init'
  path = ARGV.fetch(0, Dir.getwd)

  root_path = Pathname.new(File.expand_path(path))
  git_path = root_path.join('.git')

  ['objects', 'refs'].each do |dir|
    begin
      FileUtils.mkdir_p(git_path.join(dir))
    rescue Errno::EACCES => error
      $stderr.puts "Fatal: #{ error.message }"
      exit 1
    end
  end

  puts "Initialized empty Jit repository in #{ git_path }"
  exit 0

when 'commit'
  root_path = Pathname.new(Dir.getwd)
  git_path = root_path.join('.git')
  db_path = git_path.join('objects')
  workspace = Workspace.new(root_path)
  database = Database.new(db_path)
  refs = Refs.new(git_path)

  entries = workspace.list_files.map do |path|
    data = workspace.read_file(path)
    blob = Database::Blob.new(data)

    database.store(blob)

    stat = workspace.stat_file(path)
    Entry.new(path, blob.oid, stat)
  end

  root = Database::Tree.build(entries)
  root.traverse { |tree| database.store(tree) }

  parent = refs.read_head
  name = ENV.fetch('GIT_AUTHOR_NAME')
  email = ENV.fetch('GIT_AUTHOR_EMAIL')
  author = Database::Author.new(name, email, Time.now)
  message = $stdin.read

  commit = Database::Commit.new(parent, root.oid, author, message)
  database.store(commit)
  refs.update_head(commit.oid)

  File.open(git_path.join('HEAD'), File::WRONLY | File::CREAT) do |file|
    file.puts(commit.oid)
  end

  is_root = parent.nil? ? '(root-commit) ' : ''

  puts "[#{ is_root }#{ commit.oid }] #{ message.lines.first }"
  exit 0

else
  $stderr.puts "jit: '#{ command }' is not a jit command."
  exit 1
end
